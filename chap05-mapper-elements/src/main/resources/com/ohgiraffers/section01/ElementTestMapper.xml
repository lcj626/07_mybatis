<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ohgiraffers.section01.ElementTestMapper">
<!--
    mapper.xml에서 사용할 수 있는 엘리먼트 종류
    <cache>, <cache-ref>, <resultMap>, <parameterMap>,
    <sql>, <select>, <insert>, <update>, <delete>
-->

<!--
    <cache>와 <cache-ref>는 캐시를 설정하는 엘리먼트이다.
    - cache는 현재 네임스페이스에 대한 캐시 설정
    - cache-ref는 다른 네임스페이스에 대한 캐시 설정 참조를 할 때 사용한다.
    1. 캐시란 컴퓨터 과학에서 데이터나 값을 미리 복사해 놓은 임시 장소를 가리킨다.
    2. 캐시 접근 시간에 비해 원래 데이터에 접근하는 시간이 오래 걸리는 경우나, 값을 다시 계산하는 시간을 절약하고 싶을 때 사용.
    3. 캐시에 데이터를 미리 복사해 놓으면 계산이나 접근 시간이 없이 더 빠른 속도로 데이터에 접근할 수 있다.
    =======================================================================================================
    <캐시의 기본 설정>
    1. 매퍼 xml의 모든 select 구문의 결과를 캐시에 저장 한다.
    2. 매퍼 xml의 insert, update, delete는 모두 캐시를 지운다.
    3. 가장 오래 사용하지 않는 캐시를 지우는 알고리즘 <LRU-least Recently Used)를 사용한다.
    4. 애플리케이션이 실행되는 동안 캐시를 유지한다. 특정 시점에 사라지거나 하지 않는다.
    5. 캐시는 최대 1024개 까지 저장한다.
    6. 캐시는 읽기/쓰기가 모두 가능하다.
    ============================================================================================================
    <사용 가능 속성>
    1. eviction : 캐시 알고리즘 속성이며 디폴트는 LRU 이다. FIFO,SOFT,WERK 로도 설정 가능하다.
    2. flushInterval : 설정된 캐시를 얼마 동안 유지할지를 밀리초 단위로, 양수로만 설정 가능하다.(여기만 지정 한다고 정확히 동작 하지는 않는다.)
    3. size : 캐시에 저장할 객체의 수를 지정 한다. 디폴트는 1024이다. ( 더 크게도 가능하지만 메모리가 충분한 지 봐야 한다.)
    4. readonly : 읽기만 가능한 경우 캐시 데이터의 변경이 되지 않는다.
    ============================================================================================================
    <제약 사항>
    1. 캐시는 기본적으로 로컬 캐시이므로 서버를 여러 대 두는 경우 캐시 내용이 서로 다를 수 있다.
    따라서 서버마다 캐시 내용을 동일하게 맞추기 위해서는 분산 캐시를 사용해야 한다.
    2. 캐시 타이머 설정은 가능한 반면 스케쥴링은 불가능하다.
    이러한 제약사항을 해결하기 위해 cachnix, Ehcache, HazelCast, OsCache 등을 사용하지만 수업에서 사용하지 않을 것이다.
  -->

    <select id="selectCacheTest" resultType="java.lang.String">
        SELECT
            MENU_NAME
          FROM TBL_MENU
    </select>
<!--
    1. DB에서 조회한 결과 데이터를 객체에 로드하는 방법을 정의하는 엘리먼트이다.
    2. resultMap 엘리먼트는 Mybatis에서 가장 중요하고 강력한 엘리먼트 이다.
    3. ResultSet에서 데이터를 가져올 때 작성되는 JDBC 코드를 줄여주는 역할을 한다.
        실제로 join 매핑과 같은 복잡한 코드는 굉장히 많은 코드가 필요한데,
        ResultMap은 간단한 구문에서 매핑이 필요하지 않고 복잡한 구문에서 관계를 서술하기 위해 필요하다.
    ========================================================================================
    <resultMap> 엘리먼트 속성
    1. id : 매핑 구문에 결과 매핑을 사용할 때 구분하기 위한 id이다.
    2. Type : 결과 매핑을 적용하는 대상 객체 타입(= a매핑 구문의 결과 데이터를 저장할 java 타입을 지정)을 의미한다.
    3. extends : 자바의 상속처럼 기존에 정의된 매핑 결과를 상속받아 추가적인 매핑 정보를 확장할 때 사용한다.(-> 부모 resultMap 아이디 사용)
    4. autoMapping : 결과 매핑을 자동 매핑 할 것인지를 결정한다. (config 에 설정한 전역 설정을 override 하는데 , 이때 디폴트는 unset)
                     auto 매핑 설정은 동일한 컬럼명이 있는 경우 위험성을 가지기 때문에 사용하지 않는 것이 안전하다.(기본값 : Partial)
                     none, Partial, Full 세 가지 옵션 설정이 가능하다.
 -->

    <resultMap id="menuResultMap1" type="com.ohgiraffers.section01.DTO.MenuDTO" autoMapping="false">
        <id property="code" column="MENU_CODE"/>
        <result property="name" column="MENU_NAME"/>
        <result property="price" column="MENU_PRICE"/>
        <result property="categoryCode" column="CATEGORY_CODE"/>
    </resultMap>
    <resultMap id="menuResultMap2" type="com.ohgiraffers.section01.DTO.MenuDTO" extends="menuResultMap1">
        <result property="orderableStatus" column="ORDERABLE_STATUS"/>
    </resultMap>

    <select id="selectResultMapTest" resultMap="menuResultMap2">
        SELECT
            MENU_CODE,
            MENU_NAME,
            MENU_PRICE,
            CATEGORY_CODE,
            ORDERABLE_STATUS
          FROM TBL_MENU
         WHERE ORDERABLE_STATUS = 'Y'
    </select>

<!--
    <resultMap>의 하위 엘리먼트
        <id> : primary key 컬럼을 매핑하기 위한 태그이다.(성능향상)
        <result> : pk가 아닌 일반 컬럼에 매핑하기 위한 태그이다.
        <constructor> : 인스턴스화 되는 클래스의 생성자에 결과를 삽입하기 위해 사용한다. <idArg>, <arg> 하위 엘리먼트
        <association> : 복잡한 타입의 연관관계로 1:1 포함관계인 경우 사용한다.
        <collection> : 복잡한 타입의 연관관계로 1:N 포함관계인 경우 사용한다.
        <discriminator> : 조건에 따라 다른 resultMap이 매핑되도록 한다.
-->

    <resultMap id="menuResultMap3" type="com.ohgiraffers.section01.DTO.MenuDTO">
        <constructor>
            <idArg column="MENU_CODE" javaType="_int"/>
            <arg column="MENU_NAME" javaType="string"/>
            <arg column="MENU_PRICE" javaType="_int"/>
            <arg column="CATEGORY_CODE" javaType="_int"/>
            <arg column="ORDERABLE_STATUS" javaType="string"/>
        </constructor>
    </resultMap>

    <select id="selectResultMapConstructorTest" resultMap="menuResultMap3">
        SELECT
            A.MENU_CODE,
            A.MENU_NAME,
            A.MENU_PRICE,
            A.CATEGORY_CODE,
            A.ORDERABLE_STATUS
          FROM TBL_MENU A
         WHERE A.ORDERABLE_STATUS = 'Y'
    </select>

<!--    <resultMap id="menuAndCategoryResultMap" type="com.ohgiraffers.section01.DTO.MenuAndCategory">-->
<!--        <id property="code" column="MENU_CODE"/>-->
<!--        <result property="name" column="MENU_NAME"/>-->
<!--        <result property="price" column="MENU_PRICE"/>-->
<!--        <result property="orderableStatus" column="ORDERABLE_STATUS"/>-->
<!--        <association property="category" resultMap="categoryResultMap"/>-->
<!--    </resultMap>-->
<!--    <resultMap id="categoryResultMap" type="com.ohgiraffers.section01.DTO.CategoryDTO">-->
<!--        <id property="code" column="CATEGORY_CODE"/>-->
<!--        <result property="name" column="CATEGORY_NAME"/>-->
<!--        <result property="refCategoryCode" column="REF_CATEGORY_CODE"/>-->
<!--    </resultMap>-->

    <resultMap id="menuAndCategoryResultMap" type="com.ohgiraffers.section01.DTO.MenuAndCategory">
        <id property="code" column="MENU_CODE"/>
        <result property="name" column="MENU_NAME"/>
        <result property="price" column="MENU_PRICE"/>
        <result property="orderableStatus" column="ORDERABLE_STATUS"/>
        <association property="category" javaType="com.ohgiraffers.section01.DTO.CategoryDTO">
            <id property="code" column="CATEGORY_CODE"/>
            <result property="name" column="CATEGORY_NAME"/>
            <result property="refCategoryCode" column="REF_CATEGORY_CODE"/>
        </association>
    </resultMap>
<!--    <resultMap id="categoryResultMap" type="com.ohgiraffers.section01.DTO.CategoryDTO">-->
<!--        <id property="code" column="CATEGORY_CODE"/>-->
<!--        <result property="name" column="CATEGORY_NAME"/>-->
<!--        <result property="refCategoryCode" column="REF_CATEGORY_CODE"/>-->
<!--    </resultMap>-->

    <select id="selectResultMapAssociation" resultMap="menuAndCategoryResultMap">
        SELECT A.MENU_NAME ,
               A.MENU_CODE ,
               A.MENU_PRICE ,
               B.CATEGORY_CODE ,
               B.CATEGORY_NAME ,
               B.REF_CATEGORY_CODE ,
               A.ORDERABLE_STATUS
          FROM TBL_MENU A
          JOIN TBL_CATEGORY B ON (A.CATEGORY_CODE = B.CATEGORY_CODE)
         WHERE A.ORDERABLE_STATUS = 'Y'
    </select>

<!--    -->
<!--    <resultMap id="categoryAndMenuResultMap" type="com.ohgiraffers.section01.DTO.collection.CategoryAndMenuDTO">-->
<!--        <id property="code" column="CATEGORY_CODE"/>-->
<!--        <result property="name" column="CATEGORY_NAME"/>-->
<!--        <result property="refCategoryCode" column="REF_CATEGORY_CODE"/>-->
<!--        <collection property="menuList" resultMap="menuResultList"/>-->
<!--    </resultMap>-->
<!--    <resultMap id="menuResultList" type="com.ohgiraffers.section01.DTO.collection.MenuDTO">-->
<!--        <id property="code" column="MENU_CODE"/>-->
<!--        <result property="name" column="MENU_NAME"/>-->
<!--        <result property="price" column="MENU_PRICE"/>-->
<!--        <result property="categoryCode" column="CATEGORY_CODE"/>-->
<!--        <result property="orderableStatus" column="ORDERABLE_STATUS"/>-->
<!--    </resultMap>-->

    <resultMap id="categoryAndMenuResultMap" type="com.ohgiraffers.section01.DTO.collection.CategoryAndMenuDTO">
        <id property="code" column="CATEGORY_CODE"/>
        <result property="name" column="CATEGORY_NAME"/>
        <result property="refCategoryCode" column="REF_CATEGORY_CODE"/>
        <collection property="menuList" ofType="com.ohgiraffers.section01.DTO.collection.MenuDTO">
            <id property="code" column="MENU_CODE"/>
            <result property="name" column="MENU_NAME"/>
            <result property="price" column="MENU_PRICE"/>
            <result property="categoryCode" column="CATEGORY_CODE"/>
            <result property="orderableStatus" column="ORDERABLE_STATUS"/>
        </collection>
    </resultMap>

    <select id="selectResultMapCollectionTest" resultMap="categoryAndMenuResultMap">
        SELECT
            A.CATEGORY_CODE ,
            A.CATEGORY_NAME ,
            A.REF_CATEGORY_CODE ,
            B.MENU_NAME ,
            B.MENU_CODE ,
            B.MENU_PRICE ,
            B.CATEGORY_CODE ,
            B.ORDERABLE_STATUS
          FROM TBL_CATEGORY A
          LEFT JOIN TBL_MENU B ON (A.CATEGORY_CODE = B.CATEGORY_CODE)
         ORDER BY A.CATEGORY_CODE
    </select>

<!--
    <discriminator> 엘리먼트
        Mybatis 설정에서는 resultMap 혹은 resultType 매핑 한 가지만 선택할 수 있다.
        즉, 매핑 구문 아이디별로 결과 매핑은 고정되어 있는 상태이다.
        하지만 개발을 하다보면 매핑 구문은 동일하게 작성하고, 동적으로 결과를 매핑해야 하는 상황이 발생할 수 있다.
        이 경우 discriminator 엘리먼트를 이용하면 매핑 과정에서 동적으로 결과를 매핑하는 기능을 제공하낟.
        하지만 상속관계에 있는 클래스는 동적으로 처리할 때 사용하면 활용도에 비해 난이도가 높기 때문에 생략한다.
-->

    <sql id="colums">
        MENU_CODE,
        MENU_NAME,
        MENU_PRICE,
        CATEGORY_CODE,
        ORDERABLE_STATUS
    </sql>

    <select id="selectSqlTest" resultMap="menuResultMap2">
        SELECT
            <include refid="colums"/>
          FROM TBL_MENU A
         WHERE A.ORDERABLE_STATUS = 'Y'
    </select>

<!--    <insert> 엘리먼트
        insert, update, delete 엘리먼트는 사용하는 속성이 대부분 동일하지만 insert의 경우 좀 더 많은 속성을 정의할 수 있다.
        ======================================================================================================
        <공통 속성>
        - id : 매핑 구문을 구분하는 id 이다.
        - parameterType : 파라미터의 타입을 지정한다. 이미 정ㅇ의된 별칭을 사용하거나, 클래스의 full-name을 사용한다.
        - flushCache : 매핑 구문을 실행할 때 캐시 삭제 여부를 설정한다.
        - timeout : sql을 실행한 후 응답을 기다리는 최대 시간이다. 보통은 설정하지 않고 jdbc 드라이버 자체의 타임 아웃 값을 그대로 사용한다.
             * jdbc 드라이버는 sql 드라이버를 의미한다. EX(mysql, oracle, mongodb ...)
        - statementType : jdbc 구문 타입을 지정한다. Statement, prepared, Callable 중 하나를 쓸 수 있으며 기본값은 prepared이다.
        ==============================================================================================================
        <insert 추가 속성>
        - useGenerateKeys : 생성 키 값을 만들기 위해 jdbc의 getGenerateKeys 메소드를 호출할 지 결정하며 기본값은 false 이다.
        - keyProperty : insert 구문의 하위 엘리먼트인 selectKey 엘리먼트에 의해 반환값을 설정할 프로퍼티를 지정한다.
        - keyColumn : 생성 키를 가진 테이블의 컬럼명을 설정한다. (키 컬럼이 테이블의 첫 번째 행이 아닌 데이터베이스에서만 필요하다. - postgreSQl
-->

    <insert id="insertMenuTest" parameterType="com.ohgiraffers.section01.DTO.MenuDTO">
        INSERT INTO TBL_MENU (
            MENU_NAME
          , MENU_PRICE
          , CATEGORY_CODE
          , ORDERABLE_STATUS
        )
        VALUES (
        #{ name }
        , #{ price }
        , #{ categoryCode }
        , #{ orderableStatus }
        )
    </insert>

    <insert id="insertNewCategory">
        INSERT INTO TBL_CATEGORY (
             CATEGORY_NAME
           , REF_CATEGORY_CODE
        )
        VALUES (
        #{ category.name }
        , null
        )
    </insert>

    <insert id="insertNewMenu">
        <selectKey keyProperty="category.code" order="BEFORE" resultType="_int">
            SELECT AUTO_INCREMENT-1
              FROM INFORMATION_SCHEMA.TABLES
             WHERE TABLE_SCHEMA = 'menudb'
               AND TABLE_NAME = 'TBL_CATEGORY'
        </selectKey>
        INSERT INTO TBL_MENU(
            MENU_NAME,
            MENU_PRICE,
            CATEGORY_CODE,
            ORDERABLE_STATUS
        )VALUES(
            #{name},
            #{price},
            #{category.code},
            #{orderableStatus}
        )
    </insert>




</mapper>