<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ohgiraffers.section01.xml.DynamicSqlMapper">
    <resultMap id="menuResult" type="com.ohgiraffers.common.model.MenuDTO">
        <id property="code" column="MENU_CODE"/>
        <result property="name" column="MENU_NAME"/>
        <result property="price" column="MENU_PRICE"/>
        <result property="categoryCode" column="CATEGORY_CODE"/>
        <result property="orderableStatus" column="ORDERABLE_STATUS"/>
    </resultMap>


    <!-- gte = 이상 gt = 초과 ->  <=0 and price >=10000 구문을 추가해라 -->
    <!-- gt = greater than price < 0
         lt = lesser than price > 10000
         gte = greater than or equal price <= 0
         lte = lesser than or equal price >= 10000
     -->
    <!-- if 구문에 해당되면 밑에 것을 출력 아닌것들은 걍 무시     -->
    <select id="selectMenuByPrice" resultMap="menuResult">
        SELECT
            MENU_NAME,
            MENU_PRICE,
            CATEGORY_CODE,
            MENU_CODE,
            ORDERABLE_STATUS
          FROM TBL_MENU
         WHERE ORDERABLE_STATUS = 'Y'
        <if test="price gte 0 and price lte 10000">
            <![CDATA[
                AND MENU_PRICE < #{price}
            ]]>
        </if>
        <if test="price gt 10000 and price lte 20000">
            <![CDATA[
                AND MENU_PRICE BETWEEN 10000 AND #{price}
            ]]>
        </if>
        <if test="price gt 20000 and price lte 30000">
            <![CDATA[
                AND MENU_PRICE BETWEEN 20000 AND #{price}
            ]]>
        </if>
        <if test="price gt 30000">
            <![CDATA[
                AND MENU_PRICE BETWEEN 30000 AND #{price}
            ]]>
        </if>
        ORDER BY MENU_CODE
    </select>

    <select id="searchMenu" parameterType="SearchCriteria" resultMap="menuResult">
        SELECT
            A.MENU_NAME,
            A.MENU_PRICE,
            A.CATEGORY_CODE,
            A.MENU_CODE,
            A.ORDERABLE_STATUS
          FROM TBL_MENU A
          <if test = "condition == 'category'">
              JOIN TBL_CATEGORY B ON (A.CATEGORY_CODE = B.CATEGORY_CODE)
          </if>
         WHERE ORDERABLE_STATUS = 'Y'
          <if test = "condition == 'name'">
              AND A.MENU_NAME LIKE CONCAT('%', #{value}, '%')
          </if>
          <if test = "condition == 'category'">
              AND B.CATEGORY_NAME = #{value}
          </if>
         ORDER BY A.MENU_CODE
    </select>


    <!--
        switch 문과 비슷 한다.
        <when> 태그 test 속성 조건에 부합하면 <when> 엘리먼트 구문을 쿼리에 포함 한다.
        어떠한 when 조건도 만족하지 못하면 <otherwise> 엘리먼트 구문을 쿼리에 포함 한다.
     -->

    <select id="searchMenuBySupCategory" parameterType="SearchCriteria" resultMap="menuResult">
        SELECT
            A.MENU_NAME,
            A.MENU_PRICE,
            A.CATEGORY_CODE,
            A.MENU_CODE,
            A.ORDERABLE_STATUS
          FROM TBL_MENU A
         WHERE A.ORDERABLE_STATUS = 'Y'
         <choose>
             <when test="value == '식사'">
                 AND A.CATEGORY_CODE IN (1,4,5)
             </when>
             <when test="value == '음료'">
                 AND A.CATEGORY_CODE IN (2)
             </when>
             <otherwise>
                 AND A.CATEGORY_CODE (3)
             </otherwise>
         </choose>
          ORDER BY A.MENU_CODE
    </select>


    <!--
        foreach 태그 : 자바의 for 문 처럼 동작을 한다.
        1. collection 속성 : 반복을 수행할 대상
        2. item 속성 : 반복을 수행할 때마다 꺼내올 값의 이름을 설정
        3. open 속성 : <foreach> 엘리먼트 구문의 가장 앞에 올 문자
        4. separator 속성 : 반복이 수행될 때 꺼내온 item 사이에 들어갈 문자
        5. close 속성 : <foreach> 엘리먼트 구문의 마지막에 올 문자
    -->
    <select id="searchMenuByRandomMenuCode" parameterType="hashMap" resultMap="menuResult">
        SELECT
            A.MENU_NAME,
            A.MENU_PRICE,
            A.CATEGORY_CODE,
            A.MENU_CODE,
            A.ORDERABLE_STATUS
          FROM TBL_MENU A
         WHERE A.ORDERABLE_STATUS = 'Y'
           AND A.MENU_CODE IN
<!--        <foreach collection="randomMenuCodeList" item="menuCode" open="(" separator="," close=")">-->
<!--            #{menuCode}-->
<!--        </foreach>-->
        <foreach collection="@com.ohgiraffers.section01.xml.Application01@createRandomMenuCodeList()"
                 item="menuCode" open="(" separator="," close=")">
            #{menuCode}
        </foreach>
    </select>

<!--
    <trim> 태그 : 조회 조건에 and 혹은 OR로 시작하지 않는 다른 문자로 시작하는 경우 등
        where 엘리먼트가 기본적으로 처리하는 기능에 추가 규칙을 정의하기 위해 Trim 엘리먼트를 제공한다.
        1. prefix 속성 : 처리 후 엘리먼트의 내용이 있으면 가장 앞에 붙여주는 내용 기술
        2. prefixOverrides 속성 : 처리 후 엘리먼트 내용 중 가장 앞에 속성값에 해당하는 문자를 자동 삭제
        3. suffix 속성 : 처리 후 엘리먼트의 내용이 있으면 가장 뒤에 붙여주는 내용 기술
        4. suffixOverrides 속성 : 처리 후 엘리먼트 내용 중 가장 뒤에 속성값에 해당 하는 문자를 자동 삭제
-->
    <select id="searchMenuByCodeOrSearchAll" parameterType="SearchCriteria" resultMap="menuResult">
        SELECT
            A.MENU_NAME,
            A.MENU_PRICE,
            A.CATEGORY_CODE,
            A.MENU_CODE,
            A.ORDERABLE_STATUS
          FROM TBL_MENU A
        <if test="condition != null and condition eq 'menuCode'">
            <where>
                A.MENU_CODE = #{value} <!-- if에 매칭되면 where문 A.MENU_CODE를 넣어주겠다 -->
            </where>
        </if>
    </select>

    <select id="searchMenuByNameOrCategory" parameterType="hashmap" resultMap="menuResult">
        SELECT
            A.MENU_NAME,
            A.MENU_PRICE,
            A.CATEGORY_CODE,
            A.MENU_CODE,
            A.ORDERABLE_STATUS
          FROM TBL_MENU A
<!--        <if test="nameValue != null">-->
<!--            WHERE A.MENU_NAME LIKE CONCAT('%', #{nameValue}, '%')-->
<!--        </if>-->
<!--        <if test="categoryValue != null">-->
<!--            AND A.CATEGORY_CODE = #{categoryValue}-->
<!--        </if>  -> where 문 없어서 오류남-->

        <!--
            where 태그 : 엘리먼트 구문이 where로 시작하지 않으면 자동으로 where를 붙여 준다.
            또한 where 엘리먼트 내부에 모두 쿼리문이 추가되지 않는 상황인 경우 where를 무시한다.
            단, name 부분에 where를 빼주지 않으면 where where로 where가 2개 생성될 수 있다.
            엘리먼트 구문이 and나 or 로 시작하면 자동으로 해당 단어를 지워 준다.
        -->

<!--        <where> 태그를 이용한 해결 -->
<!--        <where>-->
<!--            <if test ="nameValue !=null">-->
<!--                WHERE A.MENU_NAME LIKE CONCAT('%', #{nameValue}, '%')-->
<!--            </if>-->
<!--            <if test="categoryValue != null">-->
<!--                AND A.CATEGORY_CODE = #{categoryValue}-->
<!--            </if>-->
<!--        </where>-->

<!--     <trim> 태그를 이용한 해결   -->
<!--        <trim prefix="WHERE" prefixOverrides="AND | OR">-->
<!--            <if test ="nameValue !=null">-->
<!--                A.MENU_NAME LIKE CONCAT('%', #{nameValue}, '%')-->
<!--            </if>-->
<!--            <if test="categoryValue != null">-->
<!--                AND A.CATEGORY_CODE = #{categoryValue}-->
<!--            </if>-->
<!--        </trim>-->

        <trim prefix="WHERE" prefixOverrides="AND | OR">
            <if test ="nameValue !=null">
                <bind name="namePattern" value="'%' + _parameter.get('nameValue') + '%'"/>
                    A.MENU_NAME LIKE #{namePattern}
            </if>
            <if test="categoryValue != null">
                AND A.CATEGORY_CODE = #{categoryValue}
            </if>
        </trim>
    </select>


    <update id="modifyMenu" parameterType="hashmap">
<!--        UPDATE TBL_MENU-->
<!--          SET MENU_NAME = #{name},-->
<!--              CATEGORY_CODE = #{categoryCode}-->
<!--              ORDERABLE_STATUS = #{orderableStatus}-->
<!--         WHERE MENU_CODE = #{code}  하나만 바꾸고 싶어도 다 바뀌기 때문에 번거로움 수정 필요-->

<!--        UPDATE TBL_MENU-->
<!--          <if test="name != null">-->
<!--              SET MENU_NAME = #{name},-->
<!--          </if>-->
<!--          <if test="categoryCode != null">-->
<!--              CATEGORY_CODE = #{categoryCode},-->
<!--          </if>-->
<!--          <if test="orderableStatus != null">-->
<!--              ORDERABLE_STATUS = #{orderableStatus}-->
<!--          </if>-->
<!--            SET MENU_NAME = #{name},-->
<!--                CATEGORY_CODE = #{categoryCode}-->
<!--                ORDERABLE_STATUS = #{orderableStatus}-->
<!--          WHERE MENU_CODE = #{code}-->

<!--        UPDATE TBL_MENU-->
<!--        <set>-->
<!--            <if test="name != null">-->
<!--                MENU_NAME = #{name},-->
<!--            </if>-->
<!--            <if test="categoryCode != null">-->
<!--                CATEGORY_CODE = #{categoryCode},-->
<!--            </if>-->
<!--            <if test="orderableStatus != null">-->
<!--                ORDERABLE_STATUS = #{orderableStatus}-->
<!--            </if>-->
<!--        </set>-->
<!--        WHERE MENU_CODE = #{code}-->

        UPDATE TBL_MENU
        <trim prefix="SET" prefixOverrides=",">
            <if test="name != null">
                MENU_NAME = #{name},
            </if>
            <if test="categoryCode != null">
                CATEGORY_CODE = #{categoryCode},
            </if>
            <if test="orderableStatus != null">
                ORDERABLE_STATUS = #{orderableStatus}
            </if>
        </trim>
        WHERE MENU_CODE = #{code}

    </update>

</mapper>


